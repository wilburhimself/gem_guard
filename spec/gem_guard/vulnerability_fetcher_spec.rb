require "spec_helper"

RSpec.describe GemGuard::VulnerabilityFetcher do
  let(:fetcher) { described_class.new }
  let(:dependency) do
    GemGuard::Dependency.new(
      name: "actionpack",
      version: "6.1.0",
      source: "https://rubygems.org"
    )
  end

  describe "#fetch_for" do
    it "fetches vulnerabilities for given dependencies" do
      osv_response = {
        "vulns" => [
          {
            "id" => "CVE-2021-22885",
            "summary" => "Possible Information Disclosure in Action Pack",
            "details" => "Detailed vulnerability information",
            "affected" => [
              {
                "package" => {"ecosystem" => "RubyGems", "name" => "actionpack"},
                "ranges" => [
                  {
                    "events" => [
                      {"introduced" => "0"},
                      {"fixed" => "6.1.3.1"}
                    ]
                  }
                ]
              }
            ],
            "severity" => [{"score" => "HIGH"}]
          }
        ]
      }

      # Stub all HTTP requests
      allow(fetcher).to receive(:make_http_request) do |url, body|
        case url
        when GemGuard::VulnerabilityFetcher::OSV_API_URL
          osv_response.to_json
        end
      end

      vulnerabilities = fetcher.fetch_for([dependency])

      expect(vulnerabilities.length).to eq(1)
      vuln = vulnerabilities.first
      expect(vuln.id).to eq("CVE-2021-22885")
      expect(vuln.gem_name).to eq("actionpack")
      expect(vuln.severity).to eq("HIGH")
      expect(vuln.summary).to eq("Possible Information Disclosure in Action Pack")
    end

    it "handles API errors gracefully" do
      allow(fetcher).to receive(:make_http_request).and_return(nil)

      vulnerabilities = fetcher.fetch_for([dependency])

      expect(vulnerabilities).to be_empty
    end

    it "handles malformed JSON responses" do
      allow(fetcher).to receive(:make_http_request).and_return("invalid json")

      vulnerabilities = fetcher.fetch_for([dependency])

      expect(vulnerabilities).to be_empty
    end

    it "deduplicates vulnerabilities by ID" do
      duplicate_response = {
        "vulns" => [
          {"id" => "CVE-2021-22885", "summary" => "Test vuln"},
          {"id" => "CVE-2021-22885", "summary" => "Same vuln"}
        ]
      }

      # Stub all HTTP requests
      allow(fetcher).to receive(:make_http_request) do |url, body|
        case url
        when GemGuard::VulnerabilityFetcher::OSV_API_URL
          duplicate_response.to_json
        end
      end

      vulnerabilities = fetcher.fetch_for([dependency])

      expect(vulnerabilities.length).to eq(1)
    end
  end
end

RSpec.describe GemGuard::Vulnerability do
  describe "#initialize" do
    it "creates a vulnerability with all attributes" do
      vuln = described_class.new(
        id: "CVE-2021-22885",
        gem_name: "actionpack",
        affected_versions: ["< 6.1.3.1"],
        fixed_versions: ["6.1.3.1"],
        severity: "HIGH",
        summary: "Test vulnerability",
        details: "Detailed information"
      )

      expect(vuln.id).to eq("CVE-2021-22885")
      expect(vuln.gem_name).to eq("actionpack")
      expect(vuln.severity).to eq("HIGH")
      expect(vuln.summary).to eq("Test vulnerability")
    end
  end

  describe "#==" do
    it "compares vulnerabilities by ID" do
      vuln1 = described_class.new(id: "CVE-2021-22885", gem_name: "actionpack")
      vuln2 = described_class.new(id: "CVE-2021-22885", gem_name: "rails")
      vuln3 = described_class.new(id: "CVE-2021-12345", gem_name: "actionpack")

      expect(vuln1).to eq(vuln2)
      expect(vuln1).not_to eq(vuln3)
    end
  end
end
